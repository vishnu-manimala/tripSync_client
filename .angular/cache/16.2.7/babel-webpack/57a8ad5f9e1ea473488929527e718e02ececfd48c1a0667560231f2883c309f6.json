{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { UserRole } from 'src/app/models/auth.model';\nexport let LoginPasswordComponent = class LoginPasswordComponent {\n  constructor(_router, _loginForm, _authService, _jwt, toaster) {\n    this._router = _router;\n    this._loginForm = _loginForm;\n    this._authService = _authService;\n    this._jwt = _jwt;\n    this.toaster = toaster;\n    this.error_message = \"\";\n    this.imageUrl = '../../../assets/tp.png';\n    this.loginData = this._loginForm.group({\n      username: this._loginForm.control(\"\", Validators.compose([Validators.required, Validators.email])),\n      password: this._loginForm.control(\"\", Validators.compose([Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}'), Validators.required]))\n    });\n  }\n  login() {\n    console.log(this.loginData.value);\n    if (this.loginData.valid) {\n      this.loginSubscription = this._authService.passwordLogin(this.loginData.value).subscribe(response => {\n        if (response.status === \"Success\") {\n          console.log(response);\n          let role = response.data.isAdmin ? UserRole.Admin : UserRole.User;\n          this._jwt.setToken(response.token);\n          this._jwt.setRole(role);\n          this._jwt.setLocal(response.data);\n          console.log(\"success\");\n          this._router.navigate(['user']);\n        } else {\n          this.error_message = \"something went wrong\";\n          this._router.navigate(['auth/login.password']);\n        }\n      });\n    } else {\n      console.log(\"not valid form\");\n      this.error_message = \"invalid credentials\";\n    }\n  }\n  navigation(url) {\n    this._router.navigate([url]);\n  }\n  ngOnDestroy() {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    if (this.loginSubscription) {\n      this.loginSubscription.unsubscribe();\n    }\n  }\n};\nLoginPasswordComponent = __decorate([Component({\n  selector: 'app-login-password',\n  templateUrl: './login-password.component.html',\n  styleUrls: ['./login-password.component.css']\n})], LoginPasswordComponent);","map":{"version":3,"names":["Component","Validators","UserRole","LoginPasswordComponent","constructor","_router","_loginForm","_authService","_jwt","toaster","error_message","imageUrl","loginData","group","username","control","compose","required","email","password","pattern","login","console","log","value","valid","loginSubscription","passwordLogin","subscribe","response","status","role","data","isAdmin","Admin","User","setToken","token","setRole","setLocal","navigate","navigation","url","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\asus\\Desktop\\Share N Go\\client\\src\\app\\views\\auth\\login\\login-password\\login-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators,FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { UserRole } from 'src/app/models/auth.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { JwtService } from 'src/app/services/jwt.service';\n\n@Component({\n  selector: 'app-login-password',\n  templateUrl: './login-password.component.html',\n  styleUrls: ['./login-password.component.css']\n})\nexport class LoginPasswordComponent {\n  loginData: FormGroup;\n  error_message: string = \"\";\n  imageUrl:string = '../../../assets/tp.png';\n  private loginSubscription!:Subscription;\nconstructor(private _router:Router,private _loginForm: FormBuilder, private _authService:AuthService, private _jwt:JwtService, private toaster:Toastr){\n\n  this.loginData = this._loginForm.group({\n    username: this._loginForm.control(\"\", Validators.compose([Validators.required, Validators.email])),\n    password: this._loginForm.control(\"\", Validators.compose([Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}'), Validators.required]))\n  })\n}\n\nlogin() {\n  console.log(this.loginData.value);\n  if (this.loginData.valid) {\n\n    this.loginSubscription =this._authService.passwordLogin(this.loginData.value).subscribe((response: any) => {\n      if (response.status === \"Success\") {\n        console.log(response)\n       let role: UserRole = response.data.isAdmin ? UserRole.Admin : UserRole.User;\n       this._jwt.setToken(response.token);\n       this._jwt.setRole(role);\n       this._jwt.setLocal(response.data);\n       console.log(\"success\");\n       this._router.navigate(['user'])\n      }else {\n        this.error_message = \"something went wrong\"\n        this._router.navigate(['auth/login.password']);\n      }\n    })\n  } else {\n    console.log(\"not valid form\");\n    this.error_message = \"invalid credentials\"\n  }\n}\n\n\n\n\n\nnavigation(url:string){\n    this._router.navigate([url]);\n  }\n\n  ngOnDestroy(): void {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    if(this.loginSubscription){\n      this.loginSubscription.unsubscribe();\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}