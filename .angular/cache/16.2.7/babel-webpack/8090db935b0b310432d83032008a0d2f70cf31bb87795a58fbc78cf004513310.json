{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { UserRole } from 'src/app/models/auth.model';\nexport let VerifyLoginOtpComponent = class VerifyLoginOtpComponent {\n  constructor(_forms, _jwt, _router, _authService, _route) {\n    this._forms = _forms;\n    this._jwt = _jwt;\n    this._router = _router;\n    this._authService = _authService;\n    this._route = _route;\n    this.error = \"\";\n    this.param = \"\";\n    this._route.queryParams.subscribe(params => {\n      this.param = params['phone'];\n      console.log(\"vab\", this.param);\n    });\n    this.formOtp = this._forms.group({\n      otp: this._forms.control(\"\", Validators.compose([Validators.minLength(4), Validators.maxLength(4), Validators.required]))\n    });\n  }\n  verifyOtp() {\n    this._authService.verifyOtp(this.formOtp.value, this.param).subscribe(result => {\n      console.log(result);\n      let response = result;\n      this.userdata = result;\n      if (response.status === \"Success\") {\n        let role = response.data.isAdmin ? UserRole.Admin : UserRole.User;\n        this._jwt.setToken(response.token);\n        this._jwt.setRole(role);\n        this._jwt.setLocal(response.data);\n        console.log(\"success\");\n      } else {\n        this.error = \"something went wrong\";\n        this._router.navigate(['auth/login.password']);\n      }\n    });\n  }\n  navigateToLoginWithPassword() {\n    this._router.navigate(['auth/login.password']);\n  }\n};\nVerifyLoginOtpComponent = __decorate([Component({\n  selector: 'app-verify-login-otp',\n  templateUrl: './verify-login-otp.component.html',\n  styleUrls: ['./verify-login-otp.component.css']\n})], VerifyLoginOtpComponent);","map":{"version":3,"names":["Component","Validators","UserRole","VerifyLoginOtpComponent","constructor","_forms","_jwt","_router","_authService","_route","error","param","queryParams","subscribe","params","console","log","formOtp","group","otp","control","compose","minLength","maxLength","required","verifyOtp","value","result","response","userdata","status","role","data","isAdmin","Admin","User","setToken","token","setRole","setLocal","navigate","navigateToLoginWithPassword","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\asus\\Desktop\\Share N Go\\client\\src\\app\\views\\auth\\login\\verify-login-otp\\verify-login-otp.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { verifyOtpResponse } from 'src/app/models/api.models';\nimport { UserRole } from 'src/app/models/auth.model';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-verify-login-otp',\n  templateUrl: './verify-login-otp.component.html',\n  styleUrls: ['./verify-login-otp.component.css']\n})\nexport class VerifyLoginOtpComponent {\n  formOtp:FormGroup;\n  error:string = \"\";\n  param:string | null = \"\";\n  userdata!: verifyOtpResponse;\n  constructor(private _forms:FormBuilder,private _jwt:j private _router:Router, private _authService:AuthService, private _route:ActivatedRoute){\n\n    this._route.queryParams.subscribe(params=>{\n      this.param = params['phone'];\n      console.log(\"vab\",this.param);\n  })\n    this.formOtp = this._forms.group({\n      otp: this._forms.control(\"\", Validators.compose([Validators.minLength(4), Validators.maxLength(4),Validators.required])),\n    })\n  }\n  verifyOtp(){\n   \n    this._authService.verifyOtp(this.formOtp.value,this.param).subscribe((result: any) => {\n      console.log(result);\n      let response = result;\n      this.userdata = result;\n      if (response.status === \"Success\") {\n        let role: UserRole = response.data.isAdmin ? UserRole.Admin : UserRole.User;\n        this._jwt.setToken(response.token);\n        this._jwt.setRole(role);\n        this._jwt.setLocal(response.data);\n        console.log(\"success\");\n        } else {\n          this.error = \"something went wrong\"\n          this._router.navigate(['auth/login.password']);\n        }\n    })\n  }\n\n  \n  navigateToLoginWithPassword(){\n    this._router.navigate(['auth/login.password'])\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAGnE,SAASC,QAAQ,QAAQ,2BAA2B;AAQ7C,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAKlCC,YAAoBC,MAAkB,EAASC,IAAM,EAASC,OAAc,EAAUC,YAAwB,EAAUC,MAAqB;IAAzH,KAAAJ,MAAM,GAANA,MAAM;IAAqB,KAAAC,IAAI,GAAJA,IAAI;IAAW,KAAAC,OAAO,GAAPA,OAAO;IAAiB,KAAAC,YAAY,GAAZA,YAAY;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAH9H,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,KAAK,GAAiB,EAAE;IAItB,IAAI,CAACF,MAAM,CAACG,WAAW,CAACC,SAAS,CAACC,MAAM,IAAE;MACxC,IAAI,CAACH,KAAK,GAAGG,MAAM,CAAC,OAAO,CAAC;MAC5BC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAC,IAAI,CAACL,KAAK,CAAC;IACjC,CAAC,CAAC;IACA,IAAI,CAACM,OAAO,GAAG,IAAI,CAACZ,MAAM,CAACa,KAAK,CAAC;MAC/BC,GAAG,EAAE,IAAI,CAACd,MAAM,CAACe,OAAO,CAAC,EAAE,EAAEnB,UAAU,CAACoB,OAAO,CAAC,CAACpB,UAAU,CAACqB,SAAS,CAAC,CAAC,CAAC,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,EAACtB,UAAU,CAACuB,QAAQ,CAAC,CAAC;KACxH,CAAC;EACJ;EACAC,SAASA,CAAA;IAEP,IAAI,CAACjB,YAAY,CAACiB,SAAS,CAAC,IAAI,CAACR,OAAO,CAACS,KAAK,EAAC,IAAI,CAACf,KAAK,CAAC,CAACE,SAAS,CAAEc,MAAW,IAAI;MACnFZ,OAAO,CAACC,GAAG,CAACW,MAAM,CAAC;MACnB,IAAIC,QAAQ,GAAGD,MAAM;MACrB,IAAI,CAACE,QAAQ,GAAGF,MAAM;MACtB,IAAIC,QAAQ,CAACE,MAAM,KAAK,SAAS,EAAE;QACjC,IAAIC,IAAI,GAAaH,QAAQ,CAACI,IAAI,CAACC,OAAO,GAAG/B,QAAQ,CAACgC,KAAK,GAAGhC,QAAQ,CAACiC,IAAI;QAC3E,IAAI,CAAC7B,IAAI,CAAC8B,QAAQ,CAACR,QAAQ,CAACS,KAAK,CAAC;QAClC,IAAI,CAAC/B,IAAI,CAACgC,OAAO,CAACP,IAAI,CAAC;QACvB,IAAI,CAACzB,IAAI,CAACiC,QAAQ,CAACX,QAAQ,CAACI,IAAI,CAAC;QACjCjB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;OACrB,MAAM;QACL,IAAI,CAACN,KAAK,GAAG,sBAAsB;QACnC,IAAI,CAACH,OAAO,CAACiC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;;IAEpD,CAAC,CAAC;EACJ;EAGAC,2BAA2BA,CAAA;IACzB,IAAI,CAAClC,OAAO,CAACiC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;EAChD;CACD;AAtCYrC,uBAAuB,GAAAuC,UAAA,EALnC1C,SAAS,CAAC;EACT2C,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,kCAAkC;CAC/C,CAAC,C,EACW1C,uBAAuB,CAsCnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}