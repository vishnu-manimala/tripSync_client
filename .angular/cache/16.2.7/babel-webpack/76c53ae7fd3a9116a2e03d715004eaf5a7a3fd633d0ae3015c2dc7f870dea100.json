{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let ForgotPasswordComponent = class ForgotPasswordComponent {\n  constructor(_router, _form, _authService, _toaster) {\n    this._router = _router;\n    this._form = _form;\n    this._authService = _authService;\n    this._toaster = _toaster;\n    this.imageUrl = \"\";\n    this.error = \"\";\n  }\n  ngOnInit() {\n    this.resetPassord = this._form.group({\n      phone: this._form.control(\"\", Validators.compose([Validators.required, Validators.pattern(/^\\d{10}$/), Validators.minLength(10)]))\n    });\n  }\n  navigation(url) {\n    this._router.navigate([url]);\n  }\n  submit() {\n    if (this.resetPassord.valid) {\n      this.forgotPasswordSubscription = this._authService.sendOtp(this.resetPassord.value).subscribe(result => {\n        console.log(result);\n        this.response = result;\n        if (this.response.status === 'Success') {\n          this._router.navigate(['auth/reset.password'], {\n            queryParams: {\n              phone: this.response.data\n            }\n          });\n        } else {\n          this.error = this.response.message;\n        }\n      });\n    }\n  }\n  ngOnDestroy() {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    if (this.forgotPasswordSubscription) {\n      this.forgotPasswordSubscription.unsubscribe();\n    }\n  }\n};\nForgotPasswordComponent = __decorate([Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})], ForgotPasswordComponent);","map":{"version":3,"names":["Component","Validators","ForgotPasswordComponent","constructor","_router","_form","_authService","_toaster","imageUrl","error","ngOnInit","resetPassord","group","phone","control","compose","required","pattern","minLength","navigation","url","navigate","submit","valid","forgotPasswordSubscription","sendOtp","value","subscribe","result","console","log","response","status","queryParams","data","message","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\asus\\Desktop\\Share N Go\\client\\src\\app\\views\\auth\\login\\forgot-password\\forgot-password.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Route, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { sendOtpResponse } from 'src/app/models/api.models';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})\nexport class ForgotPasswordComponent implements OnInit {\n  imageUrl: String = \"\";\n  resetPassord!: FormGroup;\n  response!: sendOtpResponse;\n  error: string = \"\";\nprivate forgotPasswordSubscription!:Subscription;\n\n  constructor(private _router: Router, private _form: FormBuilder, private _authService: AuthService,private _toaster:ToastrService) { }\n  ngOnInit(): void {\n    this.resetPassord = this._form.group({\n      phone: this._form.control(\"\", Validators.compose([Validators.required, Validators.pattern(/^\\d{10}$/), Validators.minLength(10)])),\n    })\n  }\n\n  navigation(url: string) {\n    this._router.navigate([url]);\n  }\n\n  submit() {\n    if (this.resetPassord.valid) {\n      this.forgotPasswordSubscription = this._authService.sendOtp(this.resetPassord.value).subscribe((result: sendOtpResponse) => {\n        console.log(result);\n        this.response = result;\n        if (this.response.status === 'Success') {\n          this._router.navigate(['auth/reset.password'], { queryParams: { phone: this.response.data } });\n        } else {\n          this.error = this.response.message;\n        }\n      })\n    }\n  }\n\n  ngOnDestroy(): void {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    if(this.forgotPasswordSubscription){\n      this.forgotPasswordSubscription.unsubscribe();\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAOlCC,YAAoBC,OAAe,EAAUC,KAAkB,EAAUC,YAAyB,EAASC,QAAsB;IAA7G,KAAAH,OAAO,GAAPA,OAAO;IAAkB,KAAAC,KAAK,GAALA,KAAK;IAAuB,KAAAC,YAAY,GAAZA,YAAY;IAAsB,KAAAC,QAAQ,GAARA,QAAQ;IANnH,KAAAC,QAAQ,GAAW,EAAE;IAGrB,KAAAC,KAAK,GAAW,EAAE;EAGmH;EACrIC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC;MACnCC,KAAK,EAAE,IAAI,CAACR,KAAK,CAACS,OAAO,CAAC,EAAE,EAAEb,UAAU,CAACc,OAAO,CAAC,CAACd,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,OAAO,CAAC,UAAU,CAAC,EAAEhB,UAAU,CAACiB,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;KAClI,CAAC;EACJ;EAEAC,UAAUA,CAACC,GAAW;IACpB,IAAI,CAAChB,OAAO,CAACiB,QAAQ,CAAC,CAACD,GAAG,CAAC,CAAC;EAC9B;EAEAE,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACX,YAAY,CAACY,KAAK,EAAE;MAC3B,IAAI,CAACC,0BAA0B,GAAG,IAAI,CAAClB,YAAY,CAACmB,OAAO,CAAC,IAAI,CAACd,YAAY,CAACe,KAAK,CAAC,CAACC,SAAS,CAAEC,MAAuB,IAAI;QACzHC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnB,IAAI,CAACG,QAAQ,GAAGH,MAAM;QACtB,IAAI,IAAI,CAACG,QAAQ,CAACC,MAAM,KAAK,SAAS,EAAE;UACtC,IAAI,CAAC5B,OAAO,CAACiB,QAAQ,CAAC,CAAC,qBAAqB,CAAC,EAAE;YAAEY,WAAW,EAAE;cAAEpB,KAAK,EAAE,IAAI,CAACkB,QAAQ,CAACG;YAAI;UAAE,CAAE,CAAC;SAC/F,MAAM;UACL,IAAI,CAACzB,KAAK,GAAG,IAAI,CAACsB,QAAQ,CAACI,OAAO;;MAEtC,CAAC,CAAC;;EAEN;EAEAC,WAAWA,CAAA;IACT;IACA;IACA,IAAG,IAAI,CAACZ,0BAA0B,EAAC;MACjC,IAAI,CAACA,0BAA0B,CAACa,WAAW,EAAE;;EAEjD;CACD;AAvCYnC,uBAAuB,GAAAoC,UAAA,EALnCtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACWvC,uBAAuB,CAuCnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}