{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/jwt.service\";\nimport * as i2 from \"@angular/router\";\nexport class JwtInterceptor {\n  constructor(_jwt, _router) {\n    this._jwt = _jwt;\n    this._router = _router;\n  }\n  intercept(request, next) {\n    const token = this._jwt.getToken();\n    console.log(\"inter\", token);\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `${token} `\n        }\n      });\n      console.log(\"head\", request.headers);\n    }\n    return next.handle(request).pipe(catchError(err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status === 401) {\n          this._router.navigate(['auth']);\n        }\n      }\n      return throwError(() => new Error(\"Something went wrong\"));\n    }));\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["HttpErrorResponse","catchError","throwError","JwtInterceptor","constructor","_jwt","_router","intercept","request","next","token","getToken","console","log","clone","setHeaders","Authorization","headers","handle","pipe","err","status","navigate","Error","_","i0","ɵɵinject","i1","JwtService","i2","Router","_2","factory","ɵfac"],"sources":["C:\\Users\\asus\\Desktop\\Share N Go\\client\\src\\app\\interceptor\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { JwtService } from '../services/jwt.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private _jwt:JwtService, private _router:Router) {}\n\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this._jwt.getToken();\n    console.log(\"inter\",token);\n    if(token){\n      request = request.clone({\n        setHeaders: {\n          Authorization: `${token} `\n        }\n      });\n      console.log(\"head\",request.headers)\n    }\n    return next.handle(request).pipe(\n      catchError((err:any)=>{\n        if(err instanceof HttpErrorResponse){\n          if(err.status === 401){\n            this._router.navigate(['auth']);\n          }\n        }\n        return throwError(()=>new Error(\"Something went wrong\"))\n      })\n    )\n  }\n}\n"],"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAKzD,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAe,EAAUC,OAAc;IAAvC,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,OAAO,GAAPA,OAAO;EAAU;EAG9DC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;IAClCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAACH,KAAK,CAAC;IAC1B,IAAGA,KAAK,EAAC;MACPF,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,GAAGN,KAAK;;OAE1B,CAAC;MACFE,OAAO,CAACC,GAAG,CAAC,MAAM,EAACL,OAAO,CAACS,OAAO,CAAC;;IAErC,OAAOR,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC,CAACW,IAAI,CAC9BlB,UAAU,CAAEmB,GAAO,IAAG;MACpB,IAAGA,GAAG,YAAYpB,iBAAiB,EAAC;QAClC,IAAGoB,GAAG,CAACC,MAAM,KAAK,GAAG,EAAC;UACpB,IAAI,CAACf,OAAO,CAACgB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;;;MAGnC,OAAOpB,UAAU,CAAC,MAAI,IAAIqB,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1D,CAAC,CAAC,CACH;EACH;EAAC,QAAAC,CAAA,G;qBA1BUrB,cAAc,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd5B,cAAc;IAAA6B,OAAA,EAAd7B,cAAc,CAAA8B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}