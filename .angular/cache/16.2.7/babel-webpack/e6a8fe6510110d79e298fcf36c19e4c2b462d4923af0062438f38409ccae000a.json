{"ast":null,"code":"import { flatMap, from, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VehicleService {\n  constructor(_http) {\n    this._http = _http;\n  }\n  getCarBrands(type) {\n    return this._http.get(`https://vpic.nhtsa.dot.gov/api/vehicles/GetMakesForVehicleType/${type}?format=json`);\n  }\n  saveVehicleData(data) {\n    return this._http.post('http://localhost:3001/vehicle/save.vehicle', data);\n  }\n  saveRegistrationData(data) {\n    return this._http.post('http://localhost:3001/vehicle/save.registration.data', data);\n  }\n  saveInsuranceData(data) {\n    return this._http.post('http://localhost:3001/vehicle/save.insurance.data', data);\n  }\n  saveVehiclePhoto(files) {\n    return this._http.post('http://localhost:3001/vehicle/save.vehicle.photos', files);\n  }\n  //to get all vehicles data added in profile\n  getVehiclesData() {\n    return this._http.get('http://localhost:3001/vehicle/get.vehicles.info').pipe(\n    // Use RxJS to map the response to an array of Vehicle objects\n    flatMap(response => {\n      return from(response) // Convert the array to an Observable\n      .pipe(map(vehicleData => {\n        // Parse the vehicle data into a Vehicle object\n        const vehicle = {\n          _id: vehicleData._,\n          category: vehicleData.category,\n          userId: vehicleData.userId,\n          brand: vehicleData.brand,\n          model: vehicleData.model,\n          yearOfManufacture: vehicleData.yearOfManufacture,\n          color: vehicleData.color,\n          registration: {\n            _id: vehicleData.registration._id,\n            registrationNumber: vehicleData.registration.registrationNumber,\n            expiryDate: new Date(vehicleData.registration.expiryDate)\n          },\n          insurance: {\n            _id: vehicleData.insurance._id,\n            insuranceCompany: vehicleData.insurance.insuranceCompany,\n            policyNumber: vehicleData.insurance.policyNumber,\n            expiryDate: new Date(vehicleData.insurance.expiryDate)\n          },\n          VehiclePhotos: vehicleData.VehiclePhotos,\n          ratingAndReview: vehicleData.ratingAndReview.map(review => {\n            return {\n              rating: review.rating,\n              review: review.review\n            };\n          }),\n          isBlocked: vehicleData.isBlocked,\n          isVerified: vehicleData.isVerified,\n          createdAt: new Date(vehicleData.createdAt),\n          updatedAt: new Date(vehicleData.updatedAt),\n          status: vehicleData.status\n        };\n        return vehicle;\n      }));\n    }));\n  }\n  static #_ = this.ɵfac = function VehicleService_Factory(t) {\n    return new (t || VehicleService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VehicleService,\n    factory: VehicleService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["flatMap","from","map","VehicleService","constructor","_http","getCarBrands","type","get","saveVehicleData","data","post","saveRegistrationData","saveInsuranceData","saveVehiclePhoto","files","getVehiclesData","pipe","response","vehicleData","vehicle","_id","_","category","userId","brand","model","yearOfManufacture","color","registration","registrationNumber","expiryDate","Date","insurance","insuranceCompany","policyNumber","VehiclePhotos","ratingAndReview","review","rating","isBlocked","isVerified","createdAt","updatedAt","status","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\asus\\Desktop\\Share N Go\\client\\src\\app\\services\\vehicle.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Vehicle } from '../models/vehicle_response.model';\nimport { Observable, flatMap, from, map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VehicleService {\n\n  constructor(private _http:HttpClient) { }\n  getCarBrands(type: string){\n    return this._http.get(`https://vpic.nhtsa.dot.gov/api/vehicles/GetMakesForVehicleType/${type}?format=json`)\n  }\n\n  saveVehicleData(data:FormGroup){\n    return this._http.post('http://localhost:3001/vehicle/save.vehicle',data);\n  }\n\n  saveRegistrationData(data:FormGroup){\n    return this._http.post('http://localhost:3001/vehicle/save.registration.data',data);\n  }\n\n  saveInsuranceData(data:FormGroup){\n    return this._http.post('http://localhost:3001/vehicle/save.insurance.data',data);\n  }\n\n  saveVehiclePhoto(files: FormData){\n    return this._http.post('http://localhost:3001/vehicle/save.vehicle.photos',files);\n  }\n\n  //to get all vehicles data added in profile\n  getVehiclesData(): Observable<Vehicle[]>{\n    return this._http.get<Vehicle[]>('http://localhost:3001/vehicle/get.vehicles.info')\n    .pipe(\n      // Use RxJS to map the response to an array of Vehicle objects\n      flatMap((response: any[]) => {\n        return from(response) // Convert the array to an Observable\n          .pipe(\n            map((vehicleData: any) => {\n              // Parse the vehicle data into a Vehicle object\n              const vehicle: Vehicle = {\n                _id:vehicleData._\n                category: vehicleData.category,\n                userId: vehicleData.userId,\n                brand: vehicleData.brand,\n                model: vehicleData.model,\n                yearOfManufacture: vehicleData.yearOfManufacture,\n                color: vehicleData.color,\n                registration: {\n                  _id:vehicleData.registration._id,\n                  registrationNumber: vehicleData.registration.registrationNumber,\n                  expiryDate: new Date(vehicleData.registration.expiryDate),\n                },\n                insurance: {\n                  _id:vehicleData.insurance._id,\n                  insuranceCompany: vehicleData.insurance.insuranceCompany,\n                  policyNumber: vehicleData.insurance.policyNumber,\n                  expiryDate: new Date(vehicleData.insurance.expiryDate),\n                },\n                VehiclePhotos: vehicleData.VehiclePhotos,\n                ratingAndReview: vehicleData.ratingAndReview.map((review: any) => {\n                  return {\n                    rating: review.rating,\n                    review: review.review,\n                  };\n                }),\n                isBlocked: vehicleData.isBlocked,\n                isVerified: vehicleData.isVerified,\n                createdAt: new Date(vehicleData.createdAt),\n                updatedAt: new Date(vehicleData.updatedAt),\n                status: vehicleData.status,\n              };\n\n              return vehicle;\n            })\n          );\n      })\n    );\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}